{"version":3,"sources":["components/Menu/Menu.js","components/ListItem/ListItem.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["Menu","className","ListItem","item","useState","isCompleted","setIsCompleted","textClassName","type","onChange","event","target","checked","id","htmlFor","toDo","List","value","setValue","array","setArray","map","element","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAYeA,MARf,WACI,OACI,yBAAKC,UAAU,QAAf,c,0BCkBOC,MArBf,YAA2B,IAARC,EAAO,EAAPA,KAAO,EACgBC,oBAAS,GADzB,mBACfC,EADe,KACFC,EADE,KAElBC,EAAgB,GAUpB,OARIF,IACAE,EAAgB,iBAQhB,6BACI,2BAAOC,KAAK,WAAWP,UAAU,WAAWQ,SANhC,SAACC,GACjBJ,EAAeI,EAAMC,OAAOC,UAK2CC,GAAIV,IACvE,2BAAOF,UAAWM,EAAeO,QAASX,GAAOA,KCdvDY,EAAO,CACT,CACIA,KAAM,OAEV,CACIA,KAAM,QAEV,CACIA,KAAM,gBAEV,CACIA,KAAM,WAEV,CACIA,KAAM,SAEV,CACIA,KAAM,QAuCCC,MAlCf,WAAiB,IAAD,EACcZ,mBAAS,IADvB,mBACLa,EADK,KACEC,EADF,OAEcd,mBAASW,GAFvB,mBAELI,EAFK,KAEEC,EAFF,KAUZ,OACI,yBAAKnB,UAAU,QAGPkB,EAAME,KAAI,SAACC,GACP,OACI,kBAAC,EAAD,CAAUnB,KAAMmB,EAAQP,UAMpC,yBAAKd,UAAU,SACX,2BAAOO,KAAK,OAAOP,UAAU,OAAOgB,MAAOA,EAAOR,SApBzC,SAACC,GAClBQ,EAASR,EAAMC,OAAOM,UAoBd,2BAAOT,KAAK,SAASP,UAAU,SAASgB,MAAM,MAAMM,QAlB5C,WAChBH,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACJ,KAAME,MAC3BC,EAAS,UCrBFM,MATf,WACE,OACI,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bfb23126.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Menu.css\"\r\n\r\n\r\nfunction Menu() {\r\n    return(\r\n        <div className=\"menu\">\r\n            ToDo List\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Menu;","import React, {useState} from \"react\";\r\nimport \"./ListItem.css\"\r\n\r\nfunction ListItem({item}) {\r\n    const [isCompleted, setIsCompleted] = useState(false);\r\n    let textClassName = '';\r\n\r\n    if (isCompleted) {\r\n        textClassName = 'text--crossed';\r\n    }\r\n\r\n    const handleCheck = (event) => {\r\n        setIsCompleted(event.target.checked);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"checkbox\" className='checkbox' onChange={handleCheck} id={item}/>\r\n            <label className={textClassName} htmlFor={item}>{item}</label>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ListItem;","import React, {useState} from \"react\";\r\nimport './List.css';\r\nimport ListItem from \"../ListItem/ListItem\";\r\n\r\nconst toDo = [\r\n    {\r\n        toDo: \"Eat\"\r\n    },\r\n    {\r\n        toDo: \"Code\"\r\n    },\r\n    {\r\n        toDo: \"Drink Coffee\"\r\n    },\r\n    {\r\n        toDo: \"Repeate\"\r\n    },\r\n    {\r\n        toDo: \"Sleep\"\r\n    },\r\n    {\r\n        toDo: \"Run\"\r\n    }\r\n\r\n];\r\n\r\nfunction List() {\r\n    const [value, setValue] = useState(\"\");\r\n    const [array, setArray] = useState(toDo);\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n    const handleClick = () => {\r\n        setArray([...array, {toDo: value}]);\r\n        setValue('');\r\n    };\r\n    return (\r\n        <div className=\"list\">\r\n\r\n            {\r\n                array.map((element) => {\r\n                    return (\r\n                        <ListItem item={element.toDo}/>\r\n                    )\r\n\r\n                })\r\n            }\r\n\r\n            <div className=\"input\">\r\n                <input type='text' className='text' value={value} onChange={handleChange}/>\r\n                <input type=\"button\" className=\"button\" value=\"Add\" onClick={handleClick}/>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default List;\r\n","import React from 'react';\nimport Menu from \"./components/Menu/Menu\";\nimport List from \"./components/List/List\";\n\nfunction App() {\n  return (\n      <>\n      <Menu/>\n      <List/>\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}